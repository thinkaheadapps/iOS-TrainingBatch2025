//: [Previous](@previous)

import Foundation

/**
 You've come a long way to build your understanding of the programming fundamentals in Swift. Soon, you'll be able to integrate your new knowledge to engineer solutions for the end of course project. But first, let's recap what you've learned this week. Following your completion of the different video items, reading, exercises and quizzes, you now know that structures and classes allow you to pass around properties and methods acting as fundamental building blocks for your code. More specifically, you learned that the structure commonly referred to as a struct is a value type instance. This means a new struct instance makes a unique copy of its data. You explored the Swift syntax to create a struct and discovered how to define struct properties and methods to store values and model behavior. You also discovered that every struct comes with an auto generated initializer called a memberwise initializer. And that the memberwise initializer helps set the initial values in a struct instance. You also learned about creating your own initializer method to assign property values by defining a method in the struct definition using the init key word. Thereafter, you discovered that mutating methods allow you to alter struct properties. Then, following a hands on exercise using mutating methods, you moved on to learn about classes and reference types. Like strucks, classes act as general purpose programming blocks for your code. And when a reference type like a class instance is assigned to a constant or variable, it stores its memory location. You discovered that a change to a class instance affects the class instance that references it and that changes are shared across instances when working with reference types. What's more, you evaluated how classes are different from structs by distinguishing between value and reference types and exploring use cases for both. You then moved on to learn more about stored and computed properties. You discovered that a stored property stores a value in a constant or variable while a computed property calculates a value and then returns the value to the declared property value type. You should now be able to differentiate between structures and classes as value and reference types and identify when to use one over the other.
 */
