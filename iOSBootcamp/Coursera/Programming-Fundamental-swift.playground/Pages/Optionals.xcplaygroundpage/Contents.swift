//: [Previous](@previous)

import Foundation

var greeting = "Hello, playground"

/*
 in this video you will learn about optionals and explore the concepts of nil, forced. Unwrapping, optional binding and implicitly unwrapped optionals. First let's start by declaring an optional. To declare an optional, you add a question mark or an exclamation mark. After the type. For example suppose I declare two variables named a value and be value as integers to indicate that they are optionals. I add a question mark or exclamation mark after the type. When I print these, the console output is nil. In both instances notice that the code executes but with some warning messages. Don't worry too much about this for now the program continued execution without an error. You use the question mark to indicate to Swift that the value it contains is an optional. And since this is an optional in it will either have an integer value or no value such as nil. The exclamation mark and swift usually acts as a warning sign. It is like a cautionary indication that you may be dealing with something that can potentially backfire. Next let me demonstrate a process known as unwrapping optionals. Before that let me delete the variable named B. Value and the print statement associated with it. Since optionals are conceptually wrapped inside a container, the value can only be accessed directly using the exclamation mark operator. For example let me create another constant called B value, declare it as an infant and assign it the value of the variable named a value. Now if I try and execute this code it will cause an error. To solve this. I can add an exclamation mark at the end of the optional and this process is known as forced unwrapping. This means the value is unwrapped irrespective of the contents. However, this also generates a runtime error which simply cautions and stops the execution forced Unwrapping must be avoided unless there is certainty that the optional statement contains a value or is not empty. To avoid this scenario, you can use something called optional binding. This is a type of safety check performed before the assignment it's achieved with the help of the if else statement. Okay before I demonstrate this, let me delete this last line of code to create optional binding for the code above. I use the if let else statement and set the conditional criteria to be the variable A value equals a value. Then inside a set of curly brackets, I can place a print statement to output the value of the variable A value. Next I create an L. Statement where I print a string that says no value. Let me run the code again and notice that the string no value is output. And this is expected as I know that the value of the variable A value is nil in this example using the if else statement unbind the optional by storing a non nil value in the local variable. Note here how this temporary variable name can be the same as the optional that has already been declared. Another way is to use implicitly Unwrapped optionals. Remember that optionals indicate that a constant or variable is allowed to have no value in some cases. However, the value for the optional is set early in the code and there is no need to check and unwrap a value every time as you already know, there will be a value present. In such cases you use something called implicit unwrapping as the name implies, there is no extra step you need to take to unwrap these type of optionals. Let me demonstrate this Now I'll clear code from the playground and once again declare two constants a value and be value as ints. However, this time I assign them respect the values of five and three for the variable A value, I will place a question mark after the in keyword and for the variable B. Value, I will place an exclamation mark. Finally I will use the print statement to print both of these variables. Notice that when I run the code, the variables are output to the console. Both of these are valid optional syntax and can be seen wrapped in the output. Developers mainly use this when they need to communicate to things in IOS the implicitly Unwrapped optional acts as something called a promise. Don't worry too much about this for the moment for now you can just think of it as a useful feature. For example, when building apps on iphones, you can still treat an implicitly Unwrapped optional, like a normal optional to check that it contains value. So to recap optionals are used. If a variable or constant could potentially be empty or have no value, You declare an optional with either a question mark or an exclamation mark. You can use the if else statement to check if the optional has a nil value. Finally, if the value for the optional is set earlier in the code, you can implicitly unwrap it. Understanding optionals is an important skill for aspiring developers, as its common features are used throughout Swift.
 */

var aValue:Int?
//var bValue:Int?

print(aValue)





